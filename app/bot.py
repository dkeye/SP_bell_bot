import logging
import os

from telegram import (
    Update, BotCommand, BotCommandScopeDefault,
    BotCommandScopeAllGroupChats, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, ContextTypes, CallbackQueryHandler
)

from database import init_db, add_user, remove_user, get_all_users
from network_utils import get_connected_macs
from permissions_utils import is_mac_registered, allowed_only, private_only

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ALLOWED_CHAT_ID = int(os.getenv("CHAT_ID"))
ALLOWED_TOPIC_ID = int(os.getenv("TOPIC_ID"))

# –û—Ç–≤–µ—Ç—ã
MAC_ALREADY_REGISTERED = "‚ùå –≠—Ç–æ—Ç MAC —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
MAC_NOT_REGISTERED = "‚ùå –≠—Ç–æ—Ç MAC –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
CANNOT_DELETE_OTHER_MAC = "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π MAC."
USAGE_REGISTER = "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reg <MAC-–∞–¥—Ä–µ—Å>"
USAGE_DELETE_MAC = "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delmac <MAC-–∞–¥—Ä–µ—Å>"
NO_CONNECTED_USERS = "‚ùå –í —Å–µ—Ç–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
NOTIFICATION_SENT = "üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
NOTIFICATION_MESSAGE = "üîî –ö—Ç–æ-—Ç–æ –ø—Ä–æ—Å–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å!"


def get_user_data(update: Update):
    user = update.effective_user
    return user.id, user.username or user.first_name


@allowed_only
@private_only
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text(USAGE_REGISTER)
        return

    mac = context.args[0].upper()
    user_id, username = get_user_data(update)

    if is_mac_registered(mac):
        logger.info("MAC %s —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (user_id=%s)", mac, user_id)
        await update.message.reply_text(MAC_ALREADY_REGISTERED)
        return

    add_user(mac, user_id, username)
    logger.info("MAC %s –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è user_id=%s", mac, user_id)
    await update.message.reply_text(f"‚úÖ @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å MAC {mac}")


@allowed_only
@private_only
async def delete_mac(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text(USAGE_DELETE_MAC)
        return

    mac = context.args[0].upper()
    user_id = update.effective_user.id
    user = is_mac_registered(mac)

    if not user:
        logger.info("MAC %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (user_id=%s)", mac, user_id)
        await update.message.reply_text(MAC_NOT_REGISTERED)
        return

    if user[0] != user_id:
        logger.warning("–ß—É–∂–æ–π MAC: %s –æ—Ç %s", mac, user_id)
        await update.message.reply_text(CANNOT_DELETE_OTHER_MAC)
        return

    remove_user(mac)
    logger.info("MAC %s —É–¥–∞–ª—ë–Ω (user_id=%s)", mac, user_id)
    await update.message.reply_text(f"‚úÖ MAC {mac} —É–¥–∞–ª—ë–Ω.")


@allowed_only
@private_only
async def choose_mac_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    macs = [mac for mac, (uid, _) in get_all_users().items() if uid == user_id]

    if not macs:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö MAC-–∞–¥—Ä–µ—Å–æ–≤.")
        return

    buttons = [[InlineKeyboardButton(mac, callback_data=f"delmac:{mac}")] for mac in macs]
    buttons.append([InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delmac:ALL")])

    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ MAC –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(buttons))


@allowed_only
@private_only
async def handle_mac_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    mac_arg = query.data.split(":")[1]

    users = get_all_users()
    if mac_arg == "ALL":
        count = sum(remove_user(mac) or 1 for mac, (uid, _) in users.items() if uid == user_id)
        await query.edit_message_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} MAC-–∞–¥—Ä–µ—Å–æ–≤.")
    elif (owner := users.get(mac_arg)) and owner[0] == user_id:
        remove_user(mac_arg)
        await query.edit_message_text(f"‚úÖ MAC {mac_arg} —É–¥–∞–ª—ë–Ω.")
    else:
        await query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç MAC.")


@allowed_only
async def who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = get_all_users()
    connected = get_connected_macs()
    names = {users[mac][1] for mac in connected if mac in users}

    if not names:
        await update.message.reply_text(NO_CONNECTED_USERS)
        return

    msg = "üë• –í —Å–µ—Ç–∏:\n" + "\n".join(f"[{name}](https://t.me/{name})" for name in names)
    await update.message.reply_text(msg, parse_mode="MarkdownV2", disable_web_page_preview=True)


@allowed_only
async def bell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = get_all_users()
    connected = get_connected_macs()
    names = {users[mac][1] for mac in connected if mac in users}

    if not names:
        await update.message.reply_text(NO_CONNECTED_USERS)
        return

    msg = NOTIFICATION_MESSAGE + "\n" + "\n".join(f"@{name}" for name in names)
    try:
        await context.bot.send_message(
            chat_id=ALLOWED_CHAT_ID,
            message_thread_id=ALLOWED_TOPIC_ID,
            text=msg,
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ bell: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.")


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    topic_id = update.message.message_thread_id if update.message else None
    await update.message.reply_text(f"Chat ID: `{chat_id}`\nTopic ID: `{topic_id}`", parse_mode="MarkdownV2")


@allowed_only
@private_only
async def my_macs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    macs = [mac for mac, (uid, _) in get_all_users().items() if uid == user_id]
    if not macs:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö MAC-–∞–¥—Ä–µ—Å–æ–≤.")
        return
    await update.message.reply_text("–í–∞—à–∏ MAC-–∞–¥—Ä–µ—Å–∞:\n" + "\n".join(macs))


@allowed_only
@private_only
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = get_all_users()
    connected = get_connected_macs()
    user_status = {}
    for mac, (user_id, username) in users.items():
        if user_id not in user_status:
            user_status[user_id] = (username, False)
        if mac in connected:
            user_status[user_id] = (username, True)

    lines = [
        f"{'üü¢' if online else '‚ö™Ô∏è'} @{username}"
        for username, online in user_status.values()
    ]

    lines.sort(reverse=True)  # –°–Ω–∞—á–∞–ª–∞ üü¢, –ø–æ—Ç–æ–º ‚ö™Ô∏è

    online_count = sum(online for _, online in user_status.values())
    text = (
            f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(user_status)}\n"
            f"üü¢ –°–µ–π—á–∞—Å –≤ —Å–µ—Ç–∏: {online_count}\n\n" +
            "\n".join(lines)
    )

    await update.message.reply_text(text)


@allowed_only
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type == "private":
        text = (
            "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/reg <MAC-–∞–¥—Ä–µ—Å> ‚Äî –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å MAC.\n"
            "/delmac ‚Äî –£–¥–∞–ª–∏—Ç—å MAC.\n"
            "/my ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ MAC.\n"
            "/stats ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n"
            "/who ‚Äî –ö—Ç–æ –≤ —Å–µ—Ç–∏.\n"
            "/bell ‚Äî –ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö.\n"
            "/info ‚Äî ID —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞.\n"
            "/help ‚Äî –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞."
        )
    else:
        text = (
            "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
            "/who ‚Äî –ö—Ç–æ –≤ —Å–µ—Ç–∏.\n"
            "/bell ‚Äî –ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö.\n"
            "/info ‚Äî ID —á–∞—Ç–∞ –∏ —Ç–æ–ø–∏–∫–∞.\n"
            "/help ‚Äî –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞."
        )
    await update.message.reply_text(text)


async def set_bot_commands(application):
    await application.bot.set_my_commands([
        BotCommand("reg", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å MAC-–∞–¥—Ä–µ—Å"),
        BotCommand("delmac", "–£–¥–∞–ª–∏—Ç—å MAC-–∞–¥—Ä–µ—Å"),
        BotCommand("my", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ MAC"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("who", "–ö—Ç–æ –≤ —Å–µ—Ç–∏"),
        BotCommand("bell", "–ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö"),
        BotCommand("info", "Chat ID / Topic ID"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
    ], scope=BotCommandScopeDefault())

    await application.bot.set_my_commands([
        BotCommand("who", "–ö—Ç–æ –≤ —Å–µ—Ç–∏"),
        BotCommand("bell", "–ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö"),
        BotCommand("info", "Chat ID / Topic ID"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
    ], scope=BotCommandScopeAllGroupChats())


def setup_bot():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.post_init = set_bot_commands

    app.add_handler(CommandHandler("reg", register, has_args=1))
    app.add_handler(CommandHandler("delmac", choose_mac_to_delete))
    app.add_handler(CallbackQueryHandler(handle_mac_delete_callback, pattern="^delmac:"))
    app.add_handler(CommandHandler("my", my_macs))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("who", who))
    app.add_handler(CommandHandler("bell", bell))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("help", help_command))
    return app


def run_bot():
    init_db()
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    app = setup_bot()
    app.run_polling()


if __name__ == "__main__":
    run_bot()
