import asyncio
import logging
import os

from telegram import Update, BotCommand, BotCommandScopeDefault, BotCommandScopeAllGroupChats, InlineKeyboardButton, \
    InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler

from database import init_db, add_user, remove_user, get_user_by_mac, get_user_by_id, get_all_users
from utils import get_connected_macs

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ALLOWED_CHAT_ID = int(os.getenv("CHAT_ID"))
ALLOWED_TOPIC_ID = int(os.getenv("TOPIC_ID"))

MAC_ALREADY_REGISTERED = "‚ùå –≠—Ç–æ—Ç MAC —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
USER_ALREADY_REGISTERED = "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π MAC –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π."
USAGE_REGISTER = "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reg <MAC-–∞–¥—Ä–µ—Å>"
MAC_NOT_REGISTERED = "‚ùå –≠—Ç–æ—Ç MAC –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
CANNOT_DELETE_OTHER_MAC = "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π MAC."
USAGE_DELETE_MAC = "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delmac <MAC-–∞–¥—Ä–µ—Å>"
NO_CONNECTED_USERS = "‚ùå –í —Å–µ—Ç–∏ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
NOTIFICATION_SENT = "üîî –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
NOTIFICATION_MESSAGE = "üîî –ö—Ç–æ-—Ç–æ –ø—Ä–æ—Å–∏—Ç –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å!"
NOT_ALLOWED = "‚ùå –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ —Ç–æ–ø–∏–∫–µ."


# –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
def is_mac_registered(mac_address):
    return get_user_by_mac(mac_address)


def is_user_registered(user_id):
    return get_user_by_id(user_id)


def get_user_data(update: Update):
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    return user_id, username


async def is_allowed(update: Update) -> bool:
    chat_id = update.effective_chat.id
    topic_id = update.message.message_thread_id if update.message else None

    # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–∫–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ –≥—Ä—É–ø–ø–µ
    if update.effective_chat.type == "private":
        try:
            member = await update.get_bot().get_chat_member(ALLOWED_CHAT_ID, update.effective_user.id)
            if member.status not in ("member", "creator", "administrator"):
                logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –≥—Ä—É–ø–ø–µ: user_id=%s", update.effective_user.id)
                return False
            return True
        except Exception as e:
            logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: %s", e)
            return False

    # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞ —Å –æ–±—Å—É–∂–¥–µ–Ω–∏—è–º–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ø–∏–∫
    if chat_id == ALLOWED_CHAT_ID and topic_id == ALLOWED_TOPIC_ID:
        return True

    logger.warning(
        "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞: user_id=%s, chat_id=%s, topic_id=%s",
        update.effective_user.id,
        chat_id,
        topic_id
    )
    return False



# /reg –∫–æ–º–∞–Ω–¥–∞
async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_allowed(update):
        await update.message.reply_text(NOT_ALLOWED)
        return

    if len(context.args) != 1:
        await update.message.reply_text(USAGE_REGISTER)
        return

    mac_address = context.args[0].upper()
    user_id, username = get_user_data(update)

    if is_mac_registered(mac_address):
        logger.info("MAC %s —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (user_id=%s)", mac_address, user_id)
        await update.message.reply_text(MAC_ALREADY_REGISTERED)
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ MAC –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    add_user(mac_address, user_id, username)
    logger.info("MAC %s –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è user_id=%s, username=%s", mac_address, user_id, username)
    await update.message.reply_text(f"‚úÖ @{username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å MAC {mac_address}")


# /delmac –∫–æ–º–∞–Ω–¥–∞
async def delete_mac(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_allowed(update):
        await update.message.reply_text(NOT_ALLOWED)
        return

    if len(context.args) != 1:
        await update.message.reply_text(USAGE_DELETE_MAC)
        return

    mac_address = context.args[0].upper()
    user_id = update.effective_user.id
    user = is_mac_registered(mac_address)

    if not user:
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π MAC: %s (user_id=%s)", mac_address, user_id)
        await update.message.reply_text(MAC_NOT_REGISTERED)
        return

    if user[1] != user_id:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–π MAC. user_id=%s, MAC=%s", user_id, mac_address)
        await update.message.reply_text(CANNOT_DELETE_OTHER_MAC)
        return

    remove_user(mac_address)
    logger.info("MAC %s —É–¥–∞–ª—ë–Ω (user_id=%s)", mac_address, user_id)
    await update.message.reply_text(f"‚úÖ MAC {mac_address} —É–¥–∞–ª—ë–Ω.")


async def choose_mac_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users = get_all_users()
    user_macs = [mac for mac, (uid, _) in users.items() if uid == user_id]

    if not user_macs:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö MAC-–∞–¥—Ä–µ—Å–æ–≤.")
        return

    buttons = [[InlineKeyboardButton(mac, callback_data=f"delmac:{mac}")]
               for mac in user_macs]
    buttons.append([InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="delmac:ALL")])

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ MAC-–∞–¥—Ä–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_mac_delete_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    mac_arg = query.data.split(":")[1]

    users = get_all_users()
    if mac_arg == "ALL":
        removed = 0
        for mac, (uid, _) in list(users.items()):
            if uid == user_id:
                remove_user(mac)
                removed += 1
        await query.edit_message_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed} MAC-–∞–¥—Ä–µ—Å–æ–≤.")
    else:
        owner = users.get(mac_arg)
        if owner and owner[0] == user_id:
            remove_user(mac_arg)
            await query.edit_message_text(f"‚úÖ MAC {mac_arg} —É–¥–∞–ª—ë–Ω.")
        else:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç MAC.")

# /who –∫–æ–º–∞–Ω–¥–∞
async def who(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_allowed(update):
        await update.message.reply_text(NOT_ALLOWED)
        return

    connected_macs = get_connected_macs()
    users = get_all_users()
    registered_usernames = {users[mac][1] for mac in connected_macs if mac in users}

    if not registered_usernames:
        logger.info("–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω (user_id=%s)", update.effective_user.id)
        await update.message.reply_text(NO_CONNECTED_USERS)
        return

    message = "üë• –í —Å–µ—Ç–∏:\n" + "\n".join(f"[{username}](https://t.me/{username})" for username in registered_usernames)
    logger.info("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Ç–∏: user_id=%s, users=%s", update.effective_user.id, registered_usernames)
    await update.message.reply_text(message, parse_mode="MarkdownV2", disable_web_page_preview=True)



# /bell –∫–æ–º–∞–Ω–¥–∞
async def bell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_allowed(update):
        await update.message.reply_text(NOT_ALLOWED)
        return

    connected_macs = get_connected_macs()
    users = get_all_users()
    usernames = {users[mac][1] for mac in connected_macs if mac in users}

    if not usernames:
        logger.info("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ù–∏–∫–æ–≥–æ –Ω–µ—Ç –≤ —Å–µ—Ç–∏ (user_id=%s)", update.effective_user.id)
        await update.message.reply_text(NO_CONNECTED_USERS)
        return

    # üì£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    message = NOTIFICATION_MESSAGE + "\n" + "\n".join(f"@{username}" for username in usernames)

    try:
        await context.bot.send_message(
            chat_id=ALLOWED_CHAT_ID,
            message_thread_id=ALLOWED_TOPIC_ID,
            text=message,
            disable_web_page_preview=True
        )
        logger.info("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: %s", message)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: %s", e)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è.")



# /info –∫–æ–º–∞–Ω–¥–∞
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    topic_id = update.message.message_thread_id if update.message else None

    logger.info("chat_id=%s, topic_id=%s", chat_id, topic_id)
    await update.message.reply_text(f"Chat ID: `{chat_id}`\nTopic ID: `{topic_id}`", parse_mode="MarkdownV2")


# /help –∫–æ–º–∞–Ω–¥–∞
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ."""
    if not await is_allowed(update):
        await update.message.reply_text(NOT_ALLOWED)
        return

    # –¢–µ–∫—Å—Ç –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
    help_text = (
        "üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/reg <MAC-–∞–¥—Ä–µ—Å> - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π MAC-–∞–¥—Ä–µ—Å.\n"
        "/delmac - –£–¥–∞–ª–∏—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MAC-–∞–¥—Ä–µ—Å.\n"
        "/who - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–µ—Ç–∏.\n"
        "/bell - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "/info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (ID).\n"
        "/help - –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")

async def set_bot_commands(application):
    await application.bot.set_my_commands(
        [
            BotCommand("reg", "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å MAC-–∞–¥—Ä–µ—Å"),
            BotCommand("delmac", "–£–¥–∞–ª–∏—Ç—å MAC-–∞–¥—Ä–µ—Å"),
            BotCommand("who", "–ö—Ç–æ –≤ —Å–µ—Ç–∏"),
            BotCommand("bell", "–ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö"),
            BotCommand("info", "Chat ID / Topic ID"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
        ],
        scope=BotCommandScopeDefault()
    )

    await application.bot.set_my_commands(
        [
            BotCommand("who", "–ö—Ç–æ –≤ —Å–µ—Ç–∏"),
            BotCommand("bell", "–ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö"),
            BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞")
        ],
        scope=BotCommandScopeAllGroupChats()
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
def setup_bot():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.post_init = set_bot_commands

    application.add_handler(CommandHandler("reg", register, has_args=1))
    application.add_handler(CommandHandler("delmac", choose_mac_to_delete))
    application.add_handler(CallbackQueryHandler(handle_mac_delete_callback, pattern="^delmac:"))
    application.add_handler(CommandHandler("who", who))
    application.add_handler(CommandHandler("bell", bell))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("help", help_command))
    return application


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def run_bot():
    init_db()
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    application = setup_bot()
    application.run_polling()


if __name__ == "__main__":
    run_bot()
